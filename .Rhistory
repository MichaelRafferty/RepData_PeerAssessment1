x <- 1
print(x)
x
msg <- "hello"
msg
x
msg + 1
msg + x
concat
concatinate(x, msg)
print
x <- 1:20
x
attributes(x)
find.packages("devtools")
find.package("devtools")
install.packages("devtools")
install.packages("kernsmooth")
install.packages("KernSmooth")
library(KernSmooth)
x <- 1:4
lapply(x, runif, min=1, max=10)
ceiling(lapply(x, runif, min=1, max=10)))
ceiling(lapply(x, runif, min=1, max=10))
library(datasets)
data(iris)
iris
iris$virginica
iris$species
iris[iris$Species='virginica']
iris[iris$Species=='virginica']
subset(iris, Species=='virginica')
subset(iris, Species=='virginica')$Length
subset(iris, Species=='virginica')[,Length]
subset(iris, Species=='virginica')[,"Length"]
subset(iris, Species=='virginica')$Sepal.Length
mean(subset(iris, Species=='virginica')$Sepal.Length)
lapply(subset(iris, Species=='virginica'), mean)
apply(iris[,1:4], 2, mean)
mean(iris$Sepal.Length)
data(mtcars)
mtcars
tapply(mtcars$cyl, mtcars$mpg, mean)
sapply(mtcars, cyl, mean)
with(mtcars, tapply(mpg, cyl, mean))
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$hp, mtcars$cyl, mean)
hpAvg <- tapply(mtcars$hp, mtcars$cyl, mean)
hpAvg[0]
hpAvg["4"]
hpAvg["8"] - hpAvg["4"]
debug(ls)
ls
n
ls
denext
next
debug
ls
next
ls()
function (name, pos = -1L, envir = as.environment(pos), all.names = FALSE,
pattern)
q
undebug(ls)
ls
ls()
c
source('~/Courses/Getting and Cleaning Data/github_test.R')
install.packages("httr")
source('~/Courses/Getting and Cleaning Data/github_test.R')
myapp <- oauth_app("github",
key = "9763c350758fb48b9629",
secret = "7eae47f37f8ae42364803d9515bb64f28fdca251")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
g <-data.frame(lat=c(-5:45))
g
?cos
g$cos <- cos(g$lat)
g
g$cos <- cos(g$lat/45*pi/4)
g
g$cos <- cos(g$lat/45*pi/2)
g
g$wid <- 50*g$cos
g
g$wid <- ceiling(50*g$cos)
g
g$wid <- round(50*g$cos,2)
g
g$wid2 <- ceiling(50*g$cos)
g
48 * 4
g$wid_b2 <- ceiling(200*g$cos)
g$wid_b <- round(200*g$cos,2)
g
setwd("~/Courses/ReproducableResearch")
library(xtable)
install.packages("xtable")
nosim <- 1000
n<- 10
sd(apply(matrix(rnorm(nosim * n), nosim), 1, mean))
1/sqrt(10)
sd(apply(matrix(rnorm(nosim * n), nosim), 1, mean))
sd(apply(matrix(rnorm(nosim * n), nosim), 1, mean))
nosim<-10000
sd(apply(matrix(rnorm(nosim * n), nosim), 1, mean))
sd(apply(matrix(rnorm(nosim * n), nosim), 1, mean))
sd(apply(matrix(rnorm(nosim * n), nosim), 1, mean))
1/sqrt(10)
sd(apply(matrix(runif(nosim * n), nosim), 1, mean))
1/sqrt(120)
sd(apply(matrix(runif(nosim * n), nosim), 1, mean))
sd(apply(matrix(runif(nosim * n), nosim), 1, mean))
sd(apply(matrix(runif(nosim * n), nosim), 1, mean))
sd(apply(matrix(rpois(nosim * n, 4), nosim), 1, mean))
2/sqrt(10)
sd(apply(matrix(rpois(nosim * n, 4), nosim), 1, mean))
sd(apply(matrix(rpois(nosim * n, 4), nosim), 1, mean))
x<-5
t<-9.432
lambda <- x/t
round(lambad+c(-1, 1)*qnorm(0.975)*sqrt(lambda/t), 3)
poisson.test(x, T=94.32)$conf
x<-5
t<-9.432
lambda <- x/t
round(lambda+c(-1, 1)*qnorm(0.975)*sqrt(lambda/t), 3)
poisson.test(x, T=94.32)$conf
pnorm(93, mean=100, sd=10)
.88*.95/(.88*.95 + .12*.95)
.88*.95/(.88*.95 + .07*.95)
.88*.95/(.88*.95 + .07*.05)
qnorm(.95,mean=100,sd=10)
qnorm(.95,mean=100,sd=10/sqrt(50))
?pbinom
pbinom(5/6, 6, lower.tail=FALSE)
pbinom(5/6, 6, prob=.5, lower.tail=FALSE)
pbinom((1:6)/6, 6, prob=.5, lower.tail=FALSE)
(1:6)/6
pbinom((1:6), 6, prob=.5, lower.tail=FALSE)
pbinom(5, 6, prob=.5, lower.tail=FALSE)
choose(6,5).5^6
choose(6,5)* (.5^6)
choose(6,6)* (.5^6)
pbinom(4, 6, prob=.5, lower.tail=FALSE)
pnorm(.51, mean=.5, sd=1/sqrt(1200))
pnorm(.51, mean=.5, sd=1/sqrt(1200), lower.tail=FALSE)
1/12(6-1)(6-1)
1/12*(6-1)*(6-1)
1/12*25
2.92 * 12
?ppois
ppois(20, 16.5*2, lower.tail=TRUE)
pnorm(-1)
pnorm(70, mean=80, sd=10)
qnorm(.95, mean=1100, sd=75)
qnorm(.95, mean=1100, sd=75/10)
pbinom(3, 5, prob=.5, lower.tail=FALSE)
.5^4
5*.5^4
choose(5,4)*.5^5 + choose(5,5)*.5^5
choose(5,4)
6*.5^4
6*.5^5
ppois(10, 5*3)
setwd("~/Courses/ReproducableResearch/RepData_proj1")
setwd("~/Courses/ReproducableResearch")
unzip("activity.zip")
setwd("~/Courses/ReproducableResearch/RepData_PeerAssessment1")
unzip("activity.zip")
?download.file
read.csv("activity.csv")
act.data<-read.csv("activity.csv")
summary(act.data)
act.data$interval<-factor(act.data$interval)
summary(act.data)
act.data<-read.csv("activity.csv")
act.data$block<-factor(act.data$interval)
summary(act.data)
?asDate
?as.date
?as.Date
as.Date(head(act.data$date,5))
act.data$date <- as.Date(act.data$date)
summary(act.data)
?is.na
count(is.na(act.data$block))
sum(is.na(act.data$block))
sum(is.na(act.data$steps))
sum(is.na(act.data$date))
sum(is.na(act.data$interval))
library(dplyr)
daily.activity <- group_by(act.data, date) %>% summarize(daily.steps=sum(steps))
?hist
with(daily.activity, steps)
with(daily.activity, daily.steps)
with(daily.activity, hist(daily.steps))
filter(act.data, date="2012-10-01")
filter(act.data, date=="2012-10-01")
filter(act.data, date=="2012-10-02")
summarize(daily.activity)
str(daily.activity)
summary(daily.act)
summary(daily.activity)
filter(act.data, date=="2012-10-08")
filter(act.data, is.na(steps))
filter(act.data, is.na(steps)) %>% group_by(date)
filter(act.data, is.na(steps)) %>% group_by(date) %>% summarize(events=sum(1))
filter(act.data, is.na(steps)) %>% group_by(date) %>% summarize(events=sum(is.na(steps)))
daily.activity
summary(daily.activity)
filter(act.data, is.na(steps)) %>% group_by(date) %>% summarize(events=sum(is.na(steps)))
daily.activity <- group_by(act.data, date) %>% summarize(steps=sum(steps), na.activity=sum(is.na(steps)))
daily.activity <- group_by(act.data, date) %>% summarize(daily.steps=sum(steps), na.activity=sum(is.na(steps)))
hist(daily.activity$na.activity)
hist(daily.activity$daily.steps)
with(daily.activity
hist(daily.steps
xlab="# of Steps per day"
)
)
with(daily.activity
hist(daily.steps,
xlab="# of Steps per day"
)
)
with(daily.activity,
hist(daily.steps,
xlab="# of Steps per day"
)
)
with(daily.activity,
hist(daily.steps,
xlab="# of Steps per day",
)
)
with(daily.activity,
hist(daily.steps,
xlab="# of Steps per day",main="Histogram of Total Daily Steps"
)
)
?library
?average
?mean
?quantile
?options
time.activity <- group_by(act.data, block) %>% summarize(ave.steps=mean(steps, na.rm=TRUE))
?remainder
?module
?modulo
?mod
?as.Time
?Time
?sprintf
act.data$hour <- floor(act.data$interval/60)
act.data$minute <- act.data$interval%%60
act.data$time <- sprintf("%d:%02d", act.data$hour, act.data$minute)
time.activity <- group_by(act.data, time) %>% summarize(ave.steps=mean(steps, na.rm=TRUE))
with(time.activity, plot(time, ave.steps, type="l"))
time.activity <- group_by(act.data, time) %>% summarize(ave.steps=mean(steps, na.rm=TRUE), interval=interval)
time.activity <- group_by(act.data, time) %>% summarize(ave.steps=mean(steps, na.rm=TRUE), interval=min(interval)
)
with(time.activity, plot(interval, ave.steps, type="l"))
time.activity$time
time.activity$interval
time.activity <- group_by(act.data, interval) %>% summarize(ave.steps=mean(steps, na.rm=TRUE), time=min(time))
with(time.activity, plot(interval, ave.steps, type="l"))
with(time.activity, plot(time, ave.steps, type="l"))
with(time.activity, plot(interval, ave.steps, type="l"))
?axis
axis(side=1,labels=time.activity(time))
axis(side=1,labels=time.activity$time)
axis(side=1,at=time.activity$interval, labels=time.activity$time)
?plot
?par
with(time.activity, plot(interval, ave.steps, type="l", xaxt="n"), axis(side=1, at=interval, labels=time))
axis(side=1,at=time.activity$interval, labels=time.activity$time)
summary(act.data$interval)
2355/60
act.data$interval
act.data$interval <- as.character(act.data$interval)
act.data$interval <- sprintf("%04d", act.data$interval)
act.data <- read.csv("activity.csv")
act.data$interval <- sprintf("%04d", act.data$interval)
act.data <- read.csv("activity.csv")
act.data$date <- as.Date(act.data$date)
act.data$time <- sprintf("%02d:%02d",
floor(act.data$interval/100),
act.data$interval%%100)
with(time.activity, plot(interval, ave.steps, type="l", xaxt="n"), axis(side=1, at=interval, labels=time))
axis(side=1,at=time.activity$interval, labels=time.activity$time)
time.activity <- group_by(act.data, time) %>% summarize(ave.steps=mean(steps, na.rm=TRUE), interval=interval)
time.activity <- group_by(act.data, interval) %>% summarize(ave.steps=mean(steps, na.rm=TRUE), time=min(time))
with(time.activity, plot(interval, ave.steps, type="l", xaxt="n"), axis(side=1, at=interval, labels=time))
axis(side=1,at=time.activity$interval, labels=time.activity$time)
?with
?stdev
?stddev
?sd
summary(daily.activity)
?hist
time.activity <- group_by(act.data, block) %>% summarize(ave.steps=mean(steps, na.rm=TRUE), time=min(time))
act.data <- read.csv("activity.csv")
act.data$date <- as.Date(act.data$date)
act.data$time <- sprintf("%02d:%02d",
floor(act.data$interval/100),
act.data$interval%%100)
act.data$block <- 60*floor(act.data$interval/100) + act.data$interval%%100
time.activity <- group_by(act.data, block) %>% summarize(ave.steps=mean(steps, na.rm=TRUE), time=min(time))
max(time.activity$ave.steps)
which(max(time.activity$ave.steps))
with(time.activity, (which(ave.steps, max(ave.steps))))
with(time.activity, which(ave.steps, max(ave.steps)))
?which
which.max(time.activity$ave.steps)
time.activity[[104]]
time.activity[104,]
?axis
?text
sprintf("%s: %d", time.activity[max.time, "time"], time.activity[max.time, "ave.steps"])
sprintf("%s: %d", time.activity[104, "time"], time.activity[104, "ave.steps"])
sprintf("%s", time.activity[104, "time"])
sprintf("%s:", time.activity[104, "time"])
sprintf("%s: %d", time.activity[104, "time"], 1.3)
sprintf("%s: %f", time.activity[104, "time"], 1.3)
sprintf("%s: %f", time.activity[104, "time"], time.activity[104, "ave.steps"])
sprintf("%s: %.2f", time.activity[104, "time"], time.activity[104, "ave.steps"])
?text
total.na <- sum(is.na(act.data$steps))
total.na
filter(act.data, is.na(steps))
na.data <- filter(act.data, is.na(steps))
summary(na.data)
filter(act.data, is.na(steps)) %>% group_by(date)
filter(act.data, is.na(steps)) %>% group_by(date) %>% summarize(natimes=sum(is.na(steps)))
filter(act.data, is.na(steps)) %>% group_by(time) %>% summarize(natimes=sum(is.na(steps)))
summary(filter(act.data, is.na(steps)) %>% group_by(time) %>% summarize(natimes=sum(is.na(steps))))
?mutate
quantile(daily.activity$daily.steps, probs=0.5)
mutate(act.data, steps = function() { if(!is.na(steps)) { return steps } else {return time.activity[block,"steps"]} })
mutate(act.data, steps = function() { if(!is.na(steps)) { return(steps) } else {return(time.activity[block,"steps"])} })
time.activity["block"==5, "ave.steps"]
time.activity["block"==5, ]
time.activity[block==5, ]
time.activity['block'==5, ]
time.activity['time'='00:00', ]
time.activity['time'=='00:00', ]
time.activity[0, ]
time.activity[1, ]
?which
time.activity[time.activity$block==5, ]
new.act <- act.data
?apply
apply(new.act, which(is.na(new.act$steps)), function(x) { x$steps <- 3})
is.na(new.act$steps)
which(is.na(new.act$steps))
apply(new.act, which(is.na(new.act$steps)), function(x) { x$steps <- 3})
new.act[which(is.na(new.act$steps))]$block
new.act[which(is.na(new.act$steps)),]$block
update.steps(NA, new.act[which(is.na(new.act$steps)),]$block)
update.steps <- function(step.count, block) {
if(!is.na(step.count)) { return step.count}
else { return time.activity[time.activity$block==block,"med.steps"]}
}
update.steps <- function(step.count, block) {
if(!is.na(step.count)) { return(step.count)}
else { return(time.activity[time.activity$block==block,"med.steps"])}
}
update.steps(NA, new.act[which(is.na(new.act$steps)),]$block)
update.steps(new.act[which(is.na(new.act$steps)),]$steps, new.act[which(is.na(new.act$steps)),]$block)
mapply(update.steps, new.act[which(is.na(new.act$steps)),]$steps, new.act[which(is.na(new.act$steps)),]$block)
na.data
na.data$steps <- time.activity$ave.steps
na.data
?sapply
na.data$block
time.activity[time.activity$block=na.data$block
time.activity[time.activity$block==na.data$block
,]
,"ave.steps"]
time.activity[time.activity$block==na.data$block, "ave.steps"]
na.data$steps <- time.activity[time.activity$block==na.data$block, "ave.steps"]
sum(is.na(new.act$steps))
new.act[which(is.na(new.act$steps)),"steps"] <-
time.activity[time.activity$block ==
new.act[which(is.na(new.act$steps)),],
"steps"]
time.activity[time.activity$block ==
new.act[which(is.na(new.act$steps)),],
"steps"]
new.act[which(is.na(new.act$steps)),]
new.act[which(is.na(new.act$steps)),"block"]
time.activity[time.activity$block ==
new.act[which(is.na(new.act$steps)),"block"],
"steps"]
new.act[which(is.na(new.act$steps)),"block"]
time.activity[time.activity$block ==
new.act[which(is.na(new.act$steps)),"block"], "ave.steps"]
new.act[which(is.na(new.act$steps)),"steps"] <-
time.activity[time.activity$block ==
new.act[which(is.na(new.act$steps)),"block"],
"ave.steps"]
sum(is.na(new.act$steps))
summary(new.act$steps)
summary(act.data$steps)
summary(time.activity$ave.steps)
time.activity[time.activity$block ==
new.act[which(is.na(new.act$steps)),"block"],
"ave.steps"]
summary(time.activity[time.activity$block ==
new.act[which(is.na(new.act$steps)),"block"],
"ave.steps"])
hold <- time.activity[time.activity$block ==
new.act[which(is.na(new.act$steps)),"block"],
"ave.steps"]
is.na(hold)
is.na(hold$ave.steps)
new.act[which(is.na(new.act$steps)),"block"]
while(sum(is.na(new.act))>0) {
new.act[which(is.na(new.act$steps)),"steps"] <-
time.activity[time.activity$block ==
new.act[which(is.na(new.act$steps)),"block"],
"med.steps"]
}
while(sum(is.na(new.act))>0) {
new.act[which(is.na(new.act$steps)),"steps"] <-
time.activity[time.activity$block ==
new.act[which(is.na(new.act$steps)),"block"],
"ave.steps"]
}
summary(new.act$steps)
summary(act.data$steps)
?legend
?text
?legend
new.act$steps
time.activity <- group_by(act.data, block) %>%
summarize(ave.steps=mean(steps, na.rm=TRUE),
med.steps=quantile(steps, probs=0.5, na.rm=TRUE),
time=min(time))
while(sum(is.na(new.act))>0) {
new.act[which(is.na(new.act$steps)),"steps"] <-
time.activity[time.activity$block ==
new.act[which(is.na(new.act$steps)),"block"],
"med.steps"]
}
summary(act.data$steps)
summary(new.act$steps)
time.activity$med.steps
sum(time.activity$med.steps)
sum(time.activity$mave.steps)
sum(time.activity$ave.steps)
time.activity$ave.steps
daily.activity <- group_by(act.data, date) %>% summarize(daily.steps=sum(steps), na.activity=sum(is.na(steps)))
## ignoring NAs in all calculations.
mean.steps <- mean(daily.activity$daily.steps, na.rm=TRUE)
sd.steps <- sd(daily.activity$daily.steps, na.rm=TRUE)
median.steps <- quantile(daily.activity$daily.steps, probs=0.5, na.rm=TRUE)
daily.activity <- group_by(new.act, date) %>% summarize(daily.steps=sum(steps), na.activity=sum(is.na(steps)))
## ignoring NAs in all calculations.
mean.steps2 <- mean(daily.activity$daily.steps, na.rm=TRUE)
sd.steps2 <- sd(daily.activity$daily.steps, na.rm=TRUE)
median.steps2 <- quantile(daily.activity$daily.steps, probs=0.5, na.rm=TRUE)
daily.activity <- group_by(new.act, date) %>% summarize(daily.steps=sum(steps), na.activity=sum(is.na(steps)))
## ignoring NAs in all calculations.
mean.steps2 <- mean(daily.activity$daily.steps)
sd.steps2 <- sd(daily.activity$daily.steps)
median.steps2 <- quantile(daily.activity$daily.steps, probs=0.5)
daily.activity <- group_by(new.act, date) %>% summarize(daily.steps=sum(steps), na.activity=sum(is.na(steps)))
summary(daily.activity$steps)
summary(daily.activity$daily.steps)
mean.steps2 <- mean(daily.activity2$daily.steps)
sd.steps2 <- sd(daily.activity2$daily.steps)
median.steps2 <- quantile(daily.activity2$daily.steps, probs=0.5)
daily.activity2 <- group_by(new.act, date) %>% summarize(daily.steps=sum(steps), na.activity=sum(is.na(steps)))
mean.steps2 <- mean(daily.activity2$daily.steps)
sd.steps2 <- sd(daily.activity2$daily.steps)
median.steps2 <- quantile(daily.activity2$daily.steps, probs=0.5)
summary(daily.activity2$daily.steps)
quantile(daily.activity2$daily.steps, probs=c(0,.25,0.5,.75,1)
)
median.steps2
median.steps2[[1]]
weekdays(act.data$date)
?weekdays
wd <- weekdays(act.data$date)
wd=="Sunday" | wd=="Saturday"
wd %in% c("Saturday", "Sunday")
wd %in% c("Saturday", "Sunday")?"weekend":"weekday"
(wd %in% c("Saturday", "Sunday"))?"weekend":"weekday"
??:
??\
??
:
sum(is.na(wd %in% c("Saturday", "Sunday")))
(wd %in% c("Saturday", "Sunday"))?1:0
if(wd %in% c("Saturday", "Sunday")) "weekend" else "weekday"
ifelse(wd %in% c("Saturday", "Sunday"), "weekend", "weekday")
?par
new.act$weekday <- weekdays(new.act$date)
new.act$workweek <- ifelse(new.data$weekday %in% c("Saturday", "Sunday"), "weekend", "weekday")
new.act$workweek <-factor(new.act$workweek)
new.act$weekday <- weekdays(new.act$date)
new.act$workweek <- ifelse(new.act$weekday %in% c("Saturday", "Sunday"), "weekend", "weekday")
new.act$workweek <-factor(new.act$workweek)
weekday.activity <- group_by(new.act, workweek, block) %>%
summarize(ave.steps=mean(steps, na.rm=TRUE),
med.steps=quantile(steps, probs=0.5, na.rm=TRUE),
time=min(time))
